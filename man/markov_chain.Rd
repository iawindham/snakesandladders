% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/markov_chain.R
\name{markov_chain}
\alias{markov_chain}
\title{Simulate markov chain for a game of Snakes and Ladders}
\usage{
markov_chain(transmat, tau = turns)
}
\arguments{
\item{transmat}{The transition matrix.  Must be created by the function \code{create_transmat()}}

\item{tau}{The number of iterations, or turns, the markov simulation is performed}
}
\value{
The vector \code{recorder} which contains the probabilities of winning the game after each turn.  The index is the turn number, and the value is the probability.
}
\description{
\code{markov_chain} simulates a markov chain for a game of Snakes and Ladders with previously described parameters.
This function requires a transition matrix, and is thus meant to be used after \code{add_snakesandladders()} and \code{create_transmatrix()} 
in succession. \code{probdis} is initialized as a vector of 0s with the same length as the board, and \code{probdis[1]} is set to 1.
\code{markov_chain} takes the transpose of the transition matrix and multiplies it with the vector \code{probdis} for each turn.
The values contained in \code{probdis} after each multiplication correspond to the probability that a player will be on that square after that turn.
The vector \code{recorder} records the probability that the player will be on the final square after each turn.  This vector is used in the function \code{finish_game_chance()}
This is repeated for the number of turns specified in the argument \code{tau}.
}
\examples{
markov_chain(transmat = create_transmatrix(), tau = 100)
}
